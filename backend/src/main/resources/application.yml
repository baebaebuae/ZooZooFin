spring:
  profiles:
    active: ${PROFILE}

  application:
    name: backend
  config:
    import: optional:file:.env[.properties]
  web:
    resources:
      add-mappings: false

oauth:
  google:
    secret: ${OAUTH_GOOGLE_SECRET}
  naver:
    secret: ${OAUTH_NAVER_SECRET}
  kakao:
    secret: ${OAUTH_KAKAO_SECRET}



--- # 로컬 설정
spring:
  config:
    activate:
      on-profile: local

  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:test
    username: sa
  data:
    redis:
      host: localhost
      port: 6379
    mongodb:
      uri: ${MONGO_URI}

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
  h2:
    console:
      enabled: true
      path: /h2-console

base-url: http://localhost:8080

redis:
  ttl:
    access: 18000
    refresh: 180000

logging:
  level:
    root: info

springdoc:
  swagger-ui:
    groups-order: DESC
    tags-sorter: alpha
    operations-sorter: method
    disable-swagger-default-url: true
    display-request-duration: true
    defaultModelsExpandDepth: 2
    defaultModelExpandDepth: 2
  api-docs:
    path: /api-docs
  show-actuator: true
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  writer-with-default-pretty-printer: true
  model-and-view-allowed: true
  paths-to-match:
    - /api/v1/**
--- # 개발 서버 설정
spring:
  config:
    activate:
      on-profile: dev

  datasource:
    driver-class-name: ${RDB_DRIVER}
    url: ${RDB_URL}
    username: ${RDB_USERNAME}
    password: ${RDB_PASSWORD}
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
    mongodb:
      uri: ${MONGO_URI}

  jpa:
    hibernate:
      ddl-auto: none

base-url: ${BASE_URL}

redis:
  ttl:
    access: ${ACCESS_EXPIRE}
    refresh: ${REFRESH_EXPIRE}

logging:
  level:
    root: warn