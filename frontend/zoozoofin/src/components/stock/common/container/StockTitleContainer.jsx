import { Collapse } from '@mui/material';

import {
    BuyingContent,
    CompanyName,
    BuyingMoneyContent,
    RateState,
    StockPrice,
    ButtonContainer,
    TitleCoulumn,
} from '@components/stock/common/container/StoreContainer';
import { CarrotIcon } from '@components/stock/common/icon/StockIcons';
import { ActiveButton, DetailButton } from '@components/stock/common/button/Button';
import { Divider } from '@components/stock/common/card/StoreCards';
import { useEffect, useState } from 'react';

import { getApiClient } from '../../../../stores/apiClient';
import useStockStore, { useUserStockStore } from '../store/StockStore';

const formatStockRate = (stockRate) => {
    const rate = Math.abs(stockRate);
    if (stockRate < 0) {
        return `‚ñº ${parseFloat(rate).toFixed(1)} %`; // ÏùåÏàòÏùº Í≤ΩÏö∞ Î∂ÄÌò∏Î•º ÎπºÍ≥† ‚ñºÎ•º Î∂ôÏûÑ
    } else if (stockRate > 0) {
        return `‚ñ≤ ${parseFloat(rate).toFixed(1)} %`; // ÏñëÏàòÏùº Í≤ΩÏö∞ + Î∂ÄÌò∏Î•º Î∂ôÏù¥Í≥† ‚ñ≤Î•º Î∂ôÏûÑ
    } else {
        return 'new'; // 0Ïùº Í≤ΩÏö∞ Í∑∏ÎåÄÎ°ú Ï∂úÎ†•
    }
};

export const StockTitle = ({ stockName, stockPrice, stockRate, onToggle, stockTotal }) => {
    return (
        <BuyingContent onClick={onToggle} style={{ cursor: 'pointer' }}>
            <CompanyName>{stockName}</CompanyName>
            <BuyingMoneyContent>
                <RateState rate={stockRate}>{formatStockRate(stockRate)}</RateState>
                <StockPrice>{(stockPrice || stockTotal || 0).toLocaleString()} ü•ï</StockPrice>
            </BuyingMoneyContent>
        </BuyingContent>
    );
};

export const StockTitleContainer = ({
    stockName,
    stockId,
    stockRate,
    stockIntro,
    isOpen,
    onToggle,
    // Íµ¨Îß§ ÌôîÎ©¥ Ïù¥Îèô ÌÖåÏä§Ìä∏Î•º ÏúÑÌï¥ Ï∂îÍ∞Ä => Îç∞Ïù¥ÌÑ∞ Ïó∞Í≤∞ ÌõÑ ÏÇ≠Ï†ú ÏòàÏ†ï
    isStockSelected,
    type,
    channel,
    onDetailClick,
    stockTotal,
    stockCount,
}) => {
    const [value, setValue] = useState(null);
    const [stockPrice, setStockPrice] = useState(null); // stockPrice ÏÉÅÌÉú Ï∂îÍ∞Ä
    const [goToOrder, setGoToOrder] = useState(false);
    const [goToDetail, setGoToDetail] = useState(false);

    const {
        clickedStockId,
        setClickedStockId,
        clickedStockInfo,
        clickedStockDetail,
        fetchStockInfo,
        fetchStockDetail,
    } = useStockStore();

    const { setClickedMyStock } = useUserStockStore();

    useEffect(() => {
        if (type === 'buy') {
            setValue('Íµ¨Îß§ÌïòÍ∏∞');
        } else {
            setValue('ÌåêÎß§ÌïòÍ∏∞');
        }
    }, [type]);

    // Ìï¥Ïô∏ ÌôòÏú® Î∞òÏòÅ ÏòàÏ†ï
    const ExchangeRate = 1350;

    // stockIdÎ•º ÌÜµÌï¥ stockPriceÎ•º Ï°∞ÌöåÌïòÎäî Ìï®Ïàò
    const fetchStockPrice = async (stockId) => {
        try {
            const apiClient = getApiClient();
            const response = await apiClient.get(`/stock/info/${stockId}`);
            // console.log(response.data.body);
            // ÌòÑÏû¨ ÌÑ¥ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú Í∞ÄÏ†∏Ïò¨ ÏòàÏ†ï
            const pricecharts = response.data.body.chart;
            // console.log(pricecharts);
            // console.log(response.data.body.chart[pricecharts.length - 1]['endPrice']);
            if (channel === 'Ìï¥Ïô∏ Ï£ºÏãù') {
                const nowPrice = response.data.body.chart[pricecharts.length - 1]['price'];
                setStockPrice(nowPrice * ExchangeRate); // stockPrice ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            } else {
                const nowPrice = response.data.body.chart[pricecharts.length - 1]['price'];
                setStockPrice(nowPrice); // stockPrice ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            }

            // const fetchedPrice = response.data.charts.slice(-1)[0].endPrice;
        } catch (error) {
            console.error(`Failed to fetch stock price for stockId: ${stockId}`, error);
        }
    };

    // Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä ÎßàÏö¥Ìä∏ÎêòÍ±∞ÎÇò stockIdÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ stockPriceÎ•º Ï°∞Ìöå
    useEffect(() => {
        if (stockId) {
            // console.log('now', stockId);
            fetchStockPrice(stockId);
        }
    }, [stockId]);

    useEffect(() => {
        if (stockId) {
            console.log(`Fetching details for stockId: ${stockId}`);
            fetchStockInfo(stockId);
            // console.log(clickedStockInfo);
            fetchStockDetail(stockId);
        }
    }, [stockId]); // clickedStockIdÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÎ©¥ fetch Ïã§Ìñâ

    const handleClickStock = () => {
        // isStockSelected(true);
        // ÌÅ¥Î¶≠ Ïãú clickedStockId ÏóÖÎç∞Ïù¥Ìä∏

        setClickedStockId(stockId);
        if (type === 'buy') {
            setGoToOrder(true);
        }
        if (type === 'sell') {
            const nowMyStock = {
                stockId: clickedStockId ? clickedStockId : 0,
                stockName: stockName,
                stockPrice: stockPrice,
                stockTotal: stockTotal,
                stockRate: stockRate,
                stockCount: stockCount,
            };
            setClickedMyStock(nowMyStock);
            setGoToOrder(true);
        }
    };

    useEffect(() => {
        if (type === 'buy') {
            // Ï£ºÎ¨∏ÌïòÍ∏∞ Ïù¥Îèô
            if (goToOrder && clickedStockId && clickedStockInfo && clickedStockDetail) {
                isStockSelected(true);
            }

            // ÏÉÅÏÑ∏ ÌôîÎ©¥ Ïù¥Îèô
            if (goToDetail && clickedStockId && clickedStockInfo && clickedStockDetail) {
                onDetailClick();
            }
        } else if (type === 'sell') {
            // Ï£ºÎ¨∏ÌïòÍ∏∞ Ïù¥Îèô
            if (goToOrder) {
                isStockSelected(true);
            }

            // ÏÉÅÏÑ∏ ÌôîÎ©¥ Ïù¥Îèô
            if (goToDetail) {
                onDetailClick();
            }
        }
    }, [goToOrder, goToDetail, clickedStockId, fetchStockInfo]); // ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥Ïóê clickedStockId Ï∂îÍ∞Ä

    const handleDetailClick = () => {
        setClickedStockId(stockId);
        setGoToDetail(true);
    };

    return (
        <>
            <BuyingContent onClick={onToggle}>
                <TitleCoulumn>
                    {channel === 'ETF' && (
                        <CompanyName type="title">{stockName.slice(0, 2)} Ï¶ùÍ∂å</CompanyName>
                    )}
                    <CompanyName> {channel === 'ETF' ? stockName.slice(2) : stockName}</CompanyName>
                </TitleCoulumn>
                <BuyingMoneyContent>
                    <RateState rate={stockRate}>{formatStockRate(stockRate)}</RateState>
                    <StockPrice> {(stockPrice || stockTotal || 0).toLocaleString()} ü•ï</StockPrice>
                </BuyingMoneyContent>
            </BuyingContent>
            <Collapse in={isOpen} timeout="auto" unmountOnExit>
                <p>{stockIntro ? stockIntro : clickedStockInfo.stockIntro}</p>
                <ButtonContainer>
                    <ActiveButton onClick={handleClickStock}>{value}</ActiveButton>
                    <DetailButton onClick={handleDetailClick}>ÏÉÅÏÑ∏ Ï†ïÎ≥¥</DetailButton>
                </ButtonContainer>
            </Collapse>
            <Divider />
        </>
    );
};

export default StockTitleContainer;
